#!/usr/bin/env groovy
@Library('jenkins-shared-libraries@gelo') _

    pipeline {

        parameters { 
            choice(name: 'INCREMENT', choices: ['Patch', 'Minor', 'Major'], description: 'Increment version') 
            text(name: 'PROJECT_DESTINATION', defaultValue: 'gelocasauay01', description: 'Enter repo URL or Dockerhub username')
            text(name: 'PROJECT_NAME', defaultValue: 'sample-java-jenkins', description: 'Enter Project Name')
        }

        agent {
            kubernetes { yaml pipelineGetAgent(kaniko_version: 'debug') }
        }

        stages {
            stage ("Notify Current Build") {
                steps {
                    script {
                        env.AUTHOR_NAME=sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    }
                    moduleNotifyMattermost('Release', 0)
                }
            }
               
            stage('Calculate Version Number') {
                steps {
                    script {
                        def tags = sh(script: 'git tag', returnStdout: true)?.trim()
                        if(tags) env.CURRENT_RELEASE_VERSION = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                        else env.CURRENT_RELEASE_VERSION = '0.0.0'
                        env.NEW_RELEASE_VERSION=moduleTradingIncrementVersion(increment:params.INCREMENT,relver:env.CURRENT_RELEASE_VERSION)
                    }
                }
            }
              
            stage('Build, Test, Create & Upload Release Package') {
                steps {

                    withMaven(maven:'maven') {
                        sh "mvn versions:set -DnewVersion=${env.NEW_RELEASE_VERSION}"
                        sh "mvn clean package"
                    }

                     container('kaniko') {
                        script {
                            sh """
                                /kaniko/executor --dockerfile ./Dockerfile \
                                --context `pwd` \
                                --destination=${params.PROJECT_DESTINATION}/${params.PROJECT_NAME}:${env.NEW_RELEASE_VERSION}-RELEASE
                            """
                        }
                    }

                }
            }

            stage('Push version change to git') {
                steps {
                    withCredentials([gitUsernamePassword(credentialsId: 'gelo-access-token', gitToolName: 'git')]) {
                        sh "git tag ${env.NEW_RELEASE_VERSION}"
                        sh "git push origin --tags"
                    }
                }
            }

        }

        post {
            success {
                moduleNotifyMattermost('Release', 1)
            }

            failure {
                moduleNotifyMattermost('Release', -1)
            }
        }
    }
